// # Mixins
// inuitcss has a number of default mixins that the framework, and developers
// working with it, can make use of.




// # Formed type style
//
// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// `.foo {
//     @include font-size(10px);
// }`
//
@mixin inuit-font-size($inuit-font-size, $inuit-line-height: true) {
    font-size: $inuit-font-size;
    font-size: ($inuit-font-size / $inuit-base-font-size) * 1rem;

    @if $inuit-line-height == true {
        line-height: ceil($inuit-font-size / $inuit-base-line-height) * ($inuit-base-line-height / $inuit-font-size);
    }

}





// # Mixin border-radius
//
// Add prefix vendor for border-radius
//
//   - `$radius`: The radius for each corner
@mixin rounded($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}





// # Mixin shadow
//
// A mixin for creating drop shadows
//
//   - `$x`:     Vertical position of the shadow
//   - `$y`:     Horizontal position of the shadow
//   - `$blur`:  Amount of blur
//   - `$color`: The color
 @mixin shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
     -moz-box-shadow: $x $y $blur $color;
          box-shadow: $x $y $blur $color;
}






// # Mixin Shadow inset
//
// A mixin for creating inset shadows
//
//   - `$x`:     Vertical position of the shadow
//   - `$y`:     Horizontal position of the shadow
//   - `$blur`:  Amount of blur
//   - `$color`: The color
@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}





// # Mixin transition
//
// Add vendor prefix for transition
//
//   - `$property`: The kind of animation
@mixin transition($property) {
  -webkit-transition: $property .2s ease;
     -moz-transition: $property .2s ease;
       -o-transition: $property .2s ease;
          transition: $property .2s ease;
}




// # Mixin box-sizing
//
// Box-sizing will change the box-model of the element it is applied to.
@mixin box-sizing {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}





// # Mixin linear gradient
//
// A mixin for creating linear gradient
//
//   - `$from`: From hex color
//   - `$to`:   To hex color
@mixin linear-gradient($from, $to) {
  /* Fallback for sad browsers */
  background-color: $to;
  /* Mozilla Firefox */
  background-image:    -moz-linear-gradient($from, $to);
  /* Opera */
  background-image:      -o-linear-gradient($from, $to);
  /* WebKit (Safari 4+, Chrome 1+) */
  background-image:        -webkit-gradient(linear,left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  /* WebKit (Chrome 11+) */
  background-image: -webkit-linear-gradient($from, $to);
  /* IE10 */
  background-image:     -ms-linear-gradient($from, $to);
  /* W3C */
  background-image:         linear-gradient($from, $to);
}





// # Mixin center block
//
// Set an element to `display: block` and center via margin.
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}





// # Mixin screen reader only
//
// The content can only be read by screen reader
@mixin sr-only {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}
